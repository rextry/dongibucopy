<?xml version="1.0" encoding="UTF-8" ?>  
<!DOCTYPE mapper   
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"   
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.spring.member.dao.MemberMapper">
	<!-- 회원가입 - member -->
	<insert id="insertMember" parameterType="memberVO">
		INSERT INTO member(
		mem_num,
		mem_email,
		mem_nick,
		mem_social_id,
		mem_reg_type,
		mem_pw
		) VALUES(
		#{mem_num},
		#{mem_email},
		#{mem_nick},
		#{mem_social_id, jdbcType=BIGINT},
		#{mem_reg_type},
		#{mem_pw}
		)
	</insert>
	<!-- 회원가입 - member_detail -->
	<insert id="insertMemberDetail" parameterType="memberVO">
		INSERT INTO
		member_detail(
		mem_num,
		mem_rcode,
		recommend_status
		) VALUES(
		#{mem_num},
		#{mem_rcode},
		#{recommend_status}
		)
	</insert>
	<!-- 회원정보 수정 - member -->
	<update id="updateMember">
		UPDATE member
		SET
		mem_nick=#{mem_nick}
		WHERE mem_num=#{mem_num}
	</update>
	<!-- 회원정보 수정 - member_detail -->
	<update id="updateMemberDetail">
		UPDATE member_detail
		SET
		mem_name=#{mem_name, jdbcType=VARCHAR},
		mem_phone=#{mem_phone, jdbcType=VARCHAR},
		mem_birth=#{mem_birth, jdbcType=DECIMAL},
		mem_mdate=SYSDATE
		WHERE mem_num=#{mem_num}
	</update>

	<!-- 관리자 -->
	<!-- sql 태그와 include 태그를 이용해서 sql문을 재사용 -->
	<sql id="memberSearch">
		<where>
			<if test="keyword != null and keyword != ''">
				<if test="keyfield == 1">
					b.mem_num=#{keyword}
				</if>
				<if test="keyfield == 2">
					b.mem_email LIKE '%' || #{keyword} || '%'
				</if>
				<if test="keyfield == 3">
					b.mem_nick LIKE '%' || #{keyword} || '%'
				</if>
			</if>
		</where>
	</sql>

	<sql id="memberOrder">
		<if test="order == 1">
			ORDER BY b.mem_num DESC
		</if>
		<if test="order == 2">
			ORDER BY b.mem_email ASC
		</if>
		<if test="order == 3">
			ORDER BY b.mem_nick ASC
		</if>
	</sql>

	<!-- 게시판 글 총 레코드수/검색 레코드수 -->
	<select id="selectMemberCount" parameterType="map"
		resultType="integer">
		SELECT
		COUNT(*)
		FROM member b
		<include refid="memberSearch"></include>
	</select>

	<!-- 게시판 전체 목록/검색 목록 -->
	<select id="selectMemberList" parameterType="map" resultType="memberVO">
		SELECT *
		FROM (SELECT
		        a.*, rownum rnum FROM (SELECT
		                                b.*,
		                                c.mem_date, c.mem_point
		                               FROM member b
		                               LEFT OUTER JOIN member_detail c
		                               ON b.mem_num=c.mem_num
			  <include refid="memberSearch"></include>
			  <include refid="memberOrder"></include>
		)a)
	<![CDATA[
	WHERE rnum >= ${start} AND rnum <= #{end}
	]]>
	</select>
	
	
	<!-- 알림 로그 찍기 -->
	<insert id="insertNotifyLog" parameterType="notifyVO">
		INSERT INTO notify_log(
							not_num,
							mem_num,
							notify_type,
							not_message,
							not_url,
							not_datetime)
					VALUES(
							not_seq.nextval,
							#{mem_num},
							#{notify_type},
							#{not_message},
							#{not_url, jdbcType=VARCHAR},
							#{not_datetime})
	</insert>
	
	<!-- 알림 목록(안 읽은 것, 최근 2주) -->
	<select id="selectNotListByMemNum" parameterType="long" resultType="notifyVO">
        SELECT *
        FROM notify_log
        JOIN db_notify_template
        USING (notify_type)
        WHERE mem_num = #{mem_num}
          AND (not_read_datetime IS NULL OR not_datetime >= SYSDATE - INTERVAL '14' DAY)
        ORDER BY not_datetime DESC
    </select>
    
    <!-- 멤버 토탈 -->
	<select id="selectMemberTotal" parameterType="long" resultType="memberTotalVO">
		SELECT 
		    a.mem_point, 
		    a.mem_num,
		    (COALESCE(sub_counts.count, 0) + COALESCE(donation_counts.count, 0) + COALESCE(chal_counts.count, 0) + COALESCE(goods_counts.count, 0)) AS total_count,
		    ROUND(COALESCE(sub_counts.total_sub_price, 0) + COALESCE(donation_counts.total_dbox_price, 0) + COALESCE(chal_counts.total_chal_price, 0) + COALESCE(goods_counts.total_goods_price, 0)) AS total_amount
		FROM member_detail a
		LEFT OUTER JOIN (
		    SELECT 
		        COUNT(*) AS count, 
		        SUM(b.sub_price) AS total_sub_price, 
		        b.mem_num 
		    FROM sub_payment b 
		    WHERE b.sub_pay_status = 0
		    GROUP BY b.mem_num
		) sub_counts
		ON a.mem_num = sub_counts.mem_num
		LEFT OUTER JOIN (
		    SELECT 
		        COUNT(*) AS count, 
		        SUM(c.dbox_do_price) AS total_dbox_price, 
		        c.mem_num 
		    FROM DBOX_DONATION c 
		    WHERE c.dbox_do_status = 0
		    GROUP BY c.mem_num
		) donation_counts
		ON a.mem_num = donation_counts.mem_num
		LEFT OUTER JOIN (
		    SELECT 
		        COUNT(*) AS count, 
		        SUM(d.chal_joi_total) AS total_chal_price, 
		        d.mem_num 
		    FROM CHAL_JOIN d
		    WHERE d.chal_joi_status = 1
		    GROUP BY d.mem_num
		) chal_counts
		ON a.mem_num = chal_counts.mem_num
		LEFT OUTER JOIN (
		    SELECT 
		        COUNT(*) AS count, 
		        (NVL(SUM(e.pay_price), 0)*0.1) AS total_goods_price, 
		        e.mem_num 
		    FROM PURCHASE e
		    WHERE e.pay_status = 0
		    GROUP BY e.mem_num
		) goods_counts
		ON a.mem_num = goods_counts.mem_num
		WHERE a.mem_num = #{mem_num}
    </select>
    
    <!-- 결제내역 카운트 -->
    <select id="selectMemberPaymentCount" parameterType="map" resultType="integer">
		SELECT 
		    (SELECT COUNT(*) FROM sub_payment WHERE mem_num = #{mem_num}) +
		    (SELECT COUNT(*) FROM dbox_donation WHERE mem_num = #{mem_num}) +
		    (SELECT COUNT(*) FROM chal_payment WHERE mem_num = #{mem_num}) +
		    (SELECT COUNT(*) FROM purchase WHERE mem_num = #{mem_num}) AS total_count
		FROM dual
	</select>
    
    <!-- 결제내역 -->
    <select id="selectMemberPayment" parameterType="map" resultType="paymentVO">
		SELECT *
		FROM (SELECT
		        x.*, rownum rnum FROM ((SELECT 
										    0 AS type,
										    TO_CHAR(a.sub_pay_num) AS payment_id,
										    TO_CHAR(sub_num) AS id,
										    TO_CHAR(a.mem_num) AS mem_num,
										    TO_CHAR(a.sub_price) AS price,
										    TO_CHAR(a.sub_price) AS donation,
										    TO_CHAR(0) AS point,
										    TO_CHAR(a.sub_pay_status) AS status,
										    TO_CHAR(a.sub_pay_date, 'YYYY-MM-DD HH24:MI:SS') AS pay_date, -- 날짜 포맷 조정
										    TO_CHAR(b.dcate_name) AS ref
										FROM sub_payment a
										JOIN subscription
										USING(sub_num)
										JOIN dona_category b
										USING(dcate_num)
										WHERE a.mem_num=#{mem_num}
										
										UNION ALL
										
										SELECT 
										    1 AS type,
										    TO_CHAR(c.dbox_imp_uid) AS payment_id,
										    TO_CHAR(c.dbox_do_num) AS id,
										    TO_CHAR(c.mem_num) AS mem_num,
										    TO_CHAR(c.dbox_do_price) AS price,
										    TO_CHAR(c.dbox_do_price) AS donation,
										    TO_CHAR(c.dbox_do_point) AS point,  -- NULL로 표시하고 싶은 경우, 이 줄을 주석처리하세요
										    TO_CHAR(c.dbox_do_status) AS status,
										    TO_CHAR(c.dbox_do_reg_date, 'YYYY-MM-DD HH24:MI:SS') AS pay_date, -- 날짜 포맷 조정
										    TO_CHAR(d.dbox_title) AS ref
										FROM dbox_donation c
										JOIN dbox d
										USING(dbox_num)
										WHERE c.mem_num=#{mem_num}
										
										UNION ALL
										
										SELECT
										    2 AS type,
										    TO_CHAR(e.chal_pay_num) AS payment_id,
										    TO_CHAR(chal_joi_num) AS id,
										    TO_CHAR(e.mem_num) AS mem_num,
										    TO_CHAR(e.chal_pay_price) AS price,
										    '미정' AS donation,
										    TO_CHAR(e.chal_point) AS point,  -- NULL로 표시하고 싶은 경우, 이 줄을 주석처리하세요
										    TO_CHAR(e.chal_pay_status) AS status,
										    TO_CHAR(e.chal_pay_date, 'YYYY-MM-DD HH24:MI:SS') AS pay_date, -- 날짜 포맷 조정
										    TO_CHAR(f.chal_title) AS ref
										FROM chal_payment e
										LEFT OUTER JOIN chal_join
										USING(chal_joi_num)
										JOIN challenge f
										USING(chal_num)
										WHERE e.mem_num=#{mem_num}
										
										UNION ALL
										
										SELECT
										    3 AS type,
										    TO_CHAR(g.imp_uid) AS payment_id,
										    TO_CHAR(g.purchase_num) AS id,
										    TO_CHAR(g.mem_num) AS mem_num,
										    TO_CHAR(g.pay_price) AS price,
										    TO_CHAR(ROUND(g.pay_price*0.1)) AS donation,
										    TO_CHAR(g.point_used) AS point,
										    TO_CHAR(g.pay_status) AS status,
										    TO_CHAR(g.pay_date, 'YYYY-MM-DD HH24:MI:SS') AS pay_date, -- 날짜 포맷 조정
										    NULL AS ref
										FROM purchase g
										WHERE g.mem_num=#{mem_num}
		        )
		        ORDER BY pay_date DESC
		        )x)
		<![CDATA[
		WHERE rnum >= ${start} AND rnum <= #{end}
		]]>
	</select>
</mapper>







